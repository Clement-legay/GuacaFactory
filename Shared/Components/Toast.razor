@inject IJSRuntime JsRuntime

<div class="toast" role="alert" data-delay="10000" data-animation="true" aria-live="assertive" aria-atomic="true" @ref="Ref">
    <div class="toast-header">
        <i class="fa-solid fa-square-check me-auto fa-xl" style="color: #26ab54;"></i>
        <strong class="me-auto">@Title</strong>
        <small>@GetFriendlyElapsedTime(Creation)</small>
        <button type="button" class="btn" @onclick="() => DisposeToast(Ref)">
            <i class="fa-solid fa-xmark"></i>
        </button>

    </div>
    <div class="toast-body">
        @Message
    </div>
</div>

@code {
    [Parameter] public DateTime Creation { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Message { get; set; }
    [Parameter] public ElementReference Ref { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsRuntime.InvokeVoidAsync("ShowToast", Ref);
        }
    }

    private void DisposeToast(ElementReference toast)
    {
        JsRuntime.InvokeVoidAsync("DisposeToast", Ref);
    }

    private static string GetFriendlyElapsedTime(DateTime dateTime)
    {
        TimeSpan timeSince = DateTime.Now.Subtract(dateTime);
        if (timeSince.TotalSeconds < 60)
        {
            return "now";
        }
        if (timeSince.TotalMinutes < 60)
        {
            int minutes = (int)timeSince.TotalMinutes;
            return $"il y a {minutes} min{(minutes > 1 ? "s" : "")}";
        }
        if (timeSince.TotalHours < 24)
        {
            int hours = (int)timeSince.TotalHours;
            return $"il y a {hours} heure{(hours > 1 ? "s" : "")}";
        }
        if (timeSince.TotalDays < 7)
        {
            int days = (int)timeSince.TotalDays;
            return $"il y a {days} jour{(days > 1 ? "s" : "")}";
        }
        return dateTime.ToString("dd/MM/yyyy HH:mm:ss");
    }
}