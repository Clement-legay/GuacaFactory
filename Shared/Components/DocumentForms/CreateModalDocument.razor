@using System.Net.Http.Headers
@inject IDocumentRequests DocumentRequests
@inject IDocumentTypeRequests DocumentTypeRequests
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div @ref="_modalCreateDocument" class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true" style="display: block">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Create a new Job</h5>
                <button type="button" @onclick="Close" style="border: none; background: none" data-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-xmark"></i>
                </button>
            </div>
            <div class="modal-body">
                @if (_errorMessage is not null)
                {
                    <div class="alert alert-danger" role="alert">
                        @_errorMessage
                    </div>
                }
                <form>
                    <div class="row justify-content-start">
                        <div class="col-6">
                            <div class="form-group mb-2">
                                <input aria-label="Name" value="@_name" @oninput="OnInputName" class="form-control" placeholder="Enter Name" name="Name"/>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group mb-2">
                                <input aria-label="LastName" value="@_description" @oninput="OnInputDescription" class="form-control" placeholder="Enter Description" name="Description"/>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group mb-2">
                                <InputFile id="FileInput" _bl_2="" type="file" class="form-control" OnChange="@HandleFileUpload" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group mb-2">
                                @if (_documentTypes is not null)
                                {
                                    <input type="text" @oninput="OnInputDocumentType" name="Document type" list="documentTypes" class="form-control" placeholder="Document type"/>
                                    <datalist id="documentTypes">
                                        @foreach (var documentType in _documentTypes)
                                        {
                                            <option value="@documentType.Name"></option>
                                        }
                                    </datalist>
                                }
                                else
                                {
                                    <input type="text" disabled name="Document type" class="form-control" placeholder="Document type"/>
                                }
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick="Close" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" @onclick="CreateDocument" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnCreate { get; set; }

    [Parameter]
    public int EmployeeId { get; set; }
    
    private ElementReference _modalCreateDocument;

    private ICollection<DocumentType>? _documentTypes;

    private string? _errorMessage;

    private string? _name;
    private string? _description;
    private string? _documentType;
    private IBrowserFile? _file;

    protected override async Task OnInitializedAsync()
    {
        _documentTypes = await DocumentTypeRequests.GetDocumentTypesAsync(1, 100);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsRuntime.InvokeVoidAsync("ShowModal", _modalCreateDocument);
        }
    }

    private void Close()
    {
        JsRuntime.InvokeVoidAsync("HideModal", _modalCreateDocument);
        OnClose.InvokeAsync(true);
    }
    
    private void OnInputName(ChangeEventArgs e)
    {
        _name = e.Value?.ToString() ?? null;
        CheckRule(e);
    }
    
    private void OnInputDescription(ChangeEventArgs e)
    {
        _description = e.Value?.ToString() ?? null;
        CheckRule(e);
    }
    
    private void OnInputDocumentType(ChangeEventArgs e)
    {
        _documentType = e.Value?.ToString() ?? null;
        CheckRule(e);
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        _file = e.File;
    }

    private async Task CreateDocument()
    {
        var documentType = _documentTypes?.FirstOrDefault(x => x.Name == _documentType);
        if (documentType is null)
        {
            if (_documentType is null)
            {
                _errorMessage = "Document type is required";
                return;
            }
            
            var multipartDocumentType = new MultipartFormDataContent();
            multipartDocumentType.Add(new StringContent(_documentType), "Name");
            
            documentType = await DocumentTypeRequests.AddDocumentTypeAsync(multipartDocumentType);
        }
        
        var multipartDocument = new MultipartFormDataContent();

        if (_name != null) multipartDocument.Add(new StringContent(_name), "Name");
        if (_description != null) multipartDocument.Add(new StringContent(_description), "Description");
        if (_file != null)
        {
            var streamContent = new StreamContent(_file.OpenReadStream());
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(_file.ContentType);
            multipartDocument.Add(streamContent, "File", _file.Name);
        }
        multipartDocument.Add(new StringContent(EmployeeId.ToString()), "EmployeeId");
        multipartDocument.Add(new StringContent(documentType!.Id.ToString()!), "DocumentTypeId");

        var response = await DocumentRequests.AddDocumentAsync(multipartDocument);
        if (response is null)
        {
            _errorMessage = "Document could not be created";
            return;
        }
        
        await OnCreate.InvokeAsync(true);
        Close();
    }

    private void CheckRule(ChangeEventArgs e)
    {
        Console.WriteLine("CheckRule");
    }
}