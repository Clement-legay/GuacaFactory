@page "/jobs/{id:int}"
@inject IEmployeeRequests EmployeeRequests
@inject IServiceRequests ServiceRequests
@inject IDocumentRequests DocumentRequests
@inject ISessionValues SessionValues
@inject NavigationManager NavigationManager


@if (service == null)
{
    <PageTitle>GuacaFactory - Job</PageTitle>

    <LoadingSpinner/>
}
else
{
    <PageTitle>GuacaFactory - @service.Name</PageTitle>

    @if (administrator?.EmployeeUsername is not null)
    {
        <div class="row justify-content alert alert-info align-content-center">
            <div class="col-8">
                <p style="font-size: 1.2em">You are logged and using the administration mode</p>
            </div>
            <div class="col-4">
                <div class="row justify-content-end">
                    <div class="col-auto">
                        <button class="btn btn-primary" @onclick="OnEditButtonClick">Edit</button>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-danger" @onclick="OnDeleteButtonClick">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        
        @if (isDeleteModalOpen)
        {
            <DeleteModalService service="service" IsOpen="isDeleteModalOpen"/>
        }
        @if (isEditModalOpen)
        {
            <EditModalService service="service" IsOpen="isEditModalOpen"/>
        }
    }

    <div class="row justify-content-evenly mb-5">
        <div class="col-8">
            <h1>@service.Name</h1>
            
            <p style="font-size: 1.5rem">
                @service.Description
            </p>
                
            <p style="font-size: 1.3rem">
                <span style="font-weight: bold">Employees Count: </span> @service.EmployeesCount
            </p>
            
            <p style="font-size: 1.3rem">
                <span style="font-weight: bold">Created on: </span> @service.CreatedAt.ToString("dd/MM/yyyy")
            </p>
            
            <p style="font-size: 1.3rem">
                <span style="font-weight: bold">Last Update: </span> @service.UpdatedAt.ToString("dd/MM/yyyy")
            </p>
        </div>
        
        
        <div class="col-4">
            @if (service.PictureUrl != null)
            {
                <img src="@ServiceRequests.GetServicePictureUrl(service.PictureUrl)" style="height: auto; width: 100%; overflow: hidden;" alt="@service.Name" class="img-thumbnail"/>
            }
            else
            {
                <img src="image/account-25.png" style="height: auto; width: 100%; aspect-ratio: 1/1" alt="@service.Name" class="img-thumbnail"/>
            }
        </div>
    </div>

    @if (employees == null)
    {
        <LoadingSpinner/>
    }
    else
    {
        <div class="row justify-content-center">
        <div class="col-12">
        
            <div class="row justify-content-between">
                <div class="col-5">
                    <h3 class="mb-2">Employees</h3>
                </div>
                <div class="col-5">
                    <input type="text" @oninput="OnSearchValueChanged" class="form-control" placeholder="Search by name"/>
                </div>
            </div>
        </div>
        <table class="table table-hover table-responsive table-striped">
            <thead>
            <tr>
                <th>Picture</th>
                <th>Name</th>
                <th>Phone</th>
                <th>City</th>
                <th>Service</th>
                <th>Site</th>
                <th>Created At</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var employee in employees)
            {
                <tr style="cursor: pointer" @onclick="() => SelectEmployee(employee.Id)">
                    <td>
                        @if (employee.PictureUrl != null)
                        {
                            <img src="@DocumentRequests.GetDocumentViaUrl(employee.PictureUrl)" style="height: auto; width: 100px; aspect-ratio: 1/1; overflow: hidden;" alt="Employee picture" class="img-thumbnail"/>
                        }
                        else
                        {
                            <img src="image/account-25.png" style="height: auto; width: 100px; aspect-ratio: 1/1" alt="Employee picture" class="img-thumbnail"/>
                        }
                    </td>
                    <td>@employee.Firstname @employee.Lastname</td>
                    <td>@employee.Phone</td>
                    <td>@(employee.Address?.City ?? "Unknown")</td>
                    <td>@employee.ServiceName</td>
                    <td>@employee.SiteName</td>
                    <td>@employee.CreatedAt.ToString("dd/MM/yyyy")</td>
                </tr>
            }
            </tbody>
            <tfoot>
            <th colspan="12">
                <div class="row justify-content-between">
                    <div class="col-6">
                        <div class="row">
                            <div>
                                <input type="number" value="@resultsPerPage" @onchange="OnResultsPerPageChanged" class="form-control" style="width: 100px; display: inline-block"/>
                                <span>result(s) per page</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="row">
                            <div class="col">
                                <button class="btn btn-primary" @onclick="OnPreviousClicked">Previous</button>
                            </div>
                            <div class="col-auto">
                                <div>
                                    <span>Page </span>
                                    <input type="number" value="@currentPage" @onchange="OnPageChanged" class="form-control" style="width: 75px; display: inline-block"/>
                                </div>
                            </div>
                            <div class="col">
                                <button class="btn btn-primary" @onclick="OnNextClicked">Next</button>
                            </div>
                        </div>
                    </div>
                </div>
            </th>
            </tfoot>
        </table>
    </div>
    }
}

@code {
    private ICollection<Employee>? employees;
    private Service? service;
    private Administrator? administrator;
    
    private int currentPage = 1;
    private int resultsPerPage = 10;
    private string searchValue = "";
    
    private bool isEditModalOpen = false;
    private bool isDeleteModalOpen = false;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Id = Id == 0 ? 1 : Id;
        
        administrator = await SessionValues.GetSessionUser();

        service = await ServiceRequests.GetServiceByIdAsync(Id);
        if (service is null) NavigationManager.NavigateTo("/notfound");

        employees = await EmployeeRequests.GetEmployeesByServiceIdAsync(Id, searchValue, currentPage, resultsPerPage);
    }

    private void OnEditButtonClick()
    {
        isEditModalOpen = true;
    }
    
    private void OnDeleteButtonClick()
    {
        isDeleteModalOpen = true;
    }
    
    private async Task OnPageChanged(ChangeEventArgs e)
    {
        currentPage = e.Value!.ToString() == "" ? 1 : int.Parse(e.Value.ToString() ?? string.Empty);
        employees = await EmployeeRequests.GetEmployeesByServiceIdAsync(Id, searchValue, currentPage, resultsPerPage);
    }

    private async Task OnResultsPerPageChanged(ChangeEventArgs e)
    {
        resultsPerPage = e.Value!.ToString() == "" ? 10 : int.Parse(e.Value.ToString() ?? string.Empty);
        employees = await EmployeeRequests.GetEmployeesByServiceIdAsync(Id, searchValue, currentPage, resultsPerPage);
    }

    private async Task OnPreviousClicked()
    {
        if (currentPage > 1)
        {
            currentPage--;
            employees = await EmployeeRequests.GetEmployeesByServiceIdAsync(Id, searchValue, currentPage, resultsPerPage);
        }
    }
    
    private void SelectEmployee(int id)
    {
        NavigationManager.NavigateTo($"/employees/{id}");
    }
    
    private async Task OnNextClicked()
    {
        currentPage++;
        employees = await EmployeeRequests.GetEmployeesByServiceIdAsync(Id, searchValue, currentPage, resultsPerPage);
    }
    
    private async Task OnSearchValueChanged(ChangeEventArgs e)
    {
        searchValue = e.Value!.ToString() ?? "";
        employees = await EmployeeRequests.GetEmployeesByServiceIdAsync(Id, searchValue, currentPage, resultsPerPage);
    }
}